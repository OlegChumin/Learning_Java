1.	Рассмотрим, как на Java создать простейшее клиент-серверное приложение.
2.	Задача связать два компьютера друг с другом чтобы можно было физически соединиться и работать (две программы). Это сложно.
3.	Клиент-серверные приложения создают с использованием TCP/IP протокола, который гарантирует доставку сообщений/данных и в случае ошибки отправитель получает уведомление. UDP не гарантирует. (не рассматриваем)
Client 	-> HTTP -> 	Server (WEB server)
(в адресной строке браузера указываются все параметры запроса)
4.	Рассмотрим простейший вариант клиент-сервера на основе сокетов.

Client	Server
(без сервера ничего не работает)
	Port: 8000 (используются чаще для тестирования)
(при запуске сервера происходить “слушанье” на указанном порту)
	65535 вариантов портов, первые 1024 зарезервированы под системные нужды
MySQL, например использует 3306
	Номер порта, это “по какой линии подключаемся к компьютеру”
	IP адрес 127.0.0.1 (Local host) – для работы на одном компьютере. Порт как номер квартиры в доме с адресом IP.
	Когда создаем сокет на порту 8000 просто начинаем ждать (слушать). Это первый сокет. Ожидание клиента по команде
	accept.
	Когда приходит вызов и срабатывает accept создается второй сокет клиента.

Создадим однопоточный сервер. (только один клиент обслуживается, но операционная система может создать очередь)
Среди понятий и терминов, связанных с работой в сети, если одно очень важное – Сокет. Оно обозначает точку, через
которую происходит соединение.  Проще говоря, сокет соединяет в сети две программы.

Объявляется этот класс на стороне клиента, а сервер воссоздаёт его, получая сигнал на подключение.
Так происходит общение в сети. Для начала вот возможные конструкторы класса Socket:

Socket(String имя_хоста, int порт) throws UnknownHostException, IOException
Socket(InetAddress IP-адрес, int порт) throws UnknownHostException

TELNET (сокр. от англ. teletype network) — сетевой протокол для реализации текстового терминального интерфейса по сети
(в современной форме — при помощи транспорта TCP). Название «telnet» имеют также некоторые утилиты, реализующие
клиентскую часть протокола. Современный стандарт протокола описан в RFC 854.

Выполняет функции протокола прикладного уровня модели OSI. Протокол telnet использовался для удалённого
администрирования различными сетевыми устройствами и программными серверами, но уступил ssh из-за безопасности.
Тем не менее может являться единственной возможностью взаимодействовать через cli с embedded systems, например,
маршрутизаторами, так как на них отсутствует ssh.
