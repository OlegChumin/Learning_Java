package sending_emails.properties_sample;
/**
 * Properties - это класс в Java, который представляет коллекцию пар ключ-значение. Он расширяет класс Hashtable и
 * используется для хранения конфигурационных параметров в виде пар "ключ-значение". В контексте отправки электронной
 * почты с использованием JavaMail API, Properties используется для настройки свойств для почтового сервера.
 *
 * Properties предоставляет методы для добавления, получения и удаления пар ключ-значение, а также для работы с файлами
 * свойств. Он также предоставляет дополнительные методы для управления свойствами, такие как загрузка свойств из файла,
 * сохранение свойств в файл и другие операции.
 *
 * Вот пример использования Properties для настройки свойств для отправки электронной почты:
 *
 * */
import java.util.Properties;

public class EmailSenderProperties {

    public static void main(String[] args) {
        String fromEmail = "sender@example.com"; // Адрес отправителя
        String password = "password"; // Пароль от почтового ящика отправителя

        // Настройка свойств для отправки электронной почты
        Properties properties = new Properties();
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", "smtp.example.com"); // Замените настройками вашего почтового сервера
        properties.put("mail.smtp.port", "587"); // Замените настройками вашего почтового сервера

        // Добавление информации о учетных данных отправителя
        properties.put("mail.smtp.user", fromEmail);
        properties.put("mail.smtp.password", password);

        // Другие настройки свойств, если необходимо

        // Использование свойств в коде для отправки письма
        // ...
    }
}

/**
 * В этом примере Properties используется для создания коллекции свойств для настройки отправки электронной почты.
 * С помощью метода put() пары "ключ-значение" добавляются в объект properties. Ключи являются строками, представляющими
 * различные свойства (например, "mail.smtp.auth", "mail.smtp.starttls.enable", и т.д.), а значения представляют
 * настройки для этих свойств (например, "true", "smtp.example.com", и т.д.).
 *
 * Затем свойства могут быть использованы в коде для настройки сеанса JavaMail или для передачи настроек почтовому
 * серверу.
 *
 * Properties обеспечивает удобный способ хранения и передачи конфигурационных параметров в виде пар "ключ-значение".
 * В контексте отправки электронной почты, они позволяют указать различные свойства, такие как настройки
 * */
