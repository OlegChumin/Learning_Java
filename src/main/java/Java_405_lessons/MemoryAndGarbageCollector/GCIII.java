package Java_405_lessons.MemoryAndGarbageCollector;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class GCIII extends Object { // extends Object неявно это всегда
    public static void main(String[] args) throws InterruptedException {
        method();
    }

    private static void method() throws InterruptedException {
        Runtime runtime = Runtime.getRuntime(); // создаем объект Runtime
        System.out.println("Total memory before MB" + runtime.totalMemory() / 1024 / 1024); // выводим на экран общее количество памяти до ..
        System.out.println("Free memory before MB" + runtime.freeMemory() / 1024 / 1024); //выводим объем свободной памяти до..
        System.out.println();
        System.out.println("Создаем " + Integer.MAX_VALUE / 10 + " объектов.");
        List<Date> dateList = new ArrayList<>();
        for (int i = 0; i < Integer.MAX_VALUE / 10; i++) {
            Date date = new Date();
            dateList.add(date);
            //date = null; //удаляем ссылку на объект
        }
        dateList = null;
        System.out.println();
        System.out.println("Total memory after MB" + runtime.totalMemory() / 1024 / 1024); // выводим на экран общее количество памяти после ..
        System.out.println("Free memory after MB" + runtime.freeMemory() / 1024 / 1024); //выводим объем свободной памяти после..

        System.out.println("запускаем GC");
        System.gc(); // запускаем GC
        System.out.println("Total memory after MB" + runtime.totalMemory() / 1024 / 1024); // выводим на экран общее количество памяти после ..
        System.out.println("Free memory after MB" + runtime.freeMemory() / 1024 / 1024); //выводим объем свободной памяти после..
    }

    @Override
    protected void finalize() throws Throwable {
        System.out.println("finalize()");
        // с 9 Java признан устаревшим
        /*   Вызывается сборщиком мусора для объекта, когда сборщик мусора определяет, что на объект больше нет ссылок.
        Подкласс переопределяет метод finalize для удаления системных ресурсов или выполнения другой очистки.
        Общий контракт finalize заключается в том, что он вызывается, если и когда виртуальная машина Java определила,
        что больше нет никаких средств, с помощью которых этот объект может быть доступен любому потоку, который еще
        не умер, кроме как в результате действия, предпринятого завершением какого-либо другого объекта или класса,
        который готов к завершению. Метод finalize может выполнять любые действия, включая повторное предоставление
        этого объекта другим потокам; однако обычной целью finalize является выполнение действий по очистке до того,
        как объект будет безвозвратно удален. Например, метод finalize для объекта, представляющего соединение
        ввода-вывода, может выполнять явные транзакции ввода-вывода, чтобы разорвать соединение, прежде чем объект
        будет окончательно удален.
                Метод finalize объекта класса не выполняет никаких специальных действий; он просто возвращает в
                обычном режиме. Подклассы объектов могут переопределять это определение.
        Язык программирования Java не гарантирует, какой поток вызовет метод finalize для любого данного объекта.
        Однако гарантируется, что поток, вызывающий finalize, не будет содержать никаких видимых пользователем
        блокировок синхронизации при вызове finalize. Если метод finalize создает неперехваченное исключение,
        исключение игнорируется, и завершение этого объекта завершается.
        После вызова метода finalize для объекта дальнейшие действия не предпринимаются до тех пор, пока виртуальная
        машина Java снова не определит, что больше нет никаких средств, с помощью которых, этот объект может быть
        доступен любому потоку, который еще не умер, включая возможные действия других объектов или классов, которые
        готовы к завершению, после чего объект может быть отброшен.
                Метод finalize никогда не вызывается более одного раза виртуальной машиной Java для любого данного
                объекта.
        Любое исключение, создаваемое методом finalize, приводит к остановке завершения этого объекта, но в противном
        случае игнорируется.*/
    }
}
